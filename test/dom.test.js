// Generated by CoffeeScript 1.10.0
(function() {
  describe('Constructor', function() {
    it('should create dom element(s)', function() {
      var body;
      body = dom('body').nodes();
      return expect(body.nodeName.toLowerCase()).toBe('body');
    });
    it('should create dom instances from DOM element names', function() {
      var elms;
      elms = dom(['div', 'span']);
      expect(elms[0].nodes().nodeName).toBe('DIV');
      return expect(elms[1].nodes().nodeName).toBe('SPAN');
    });
    it('should wrap a single DOM node', function() {
      var instance, someNode;
      someNode = dom('div').nodes();
      instance = dom(someNode);
      return expect(instance.nodes().nodeName).toBe('DIV');
    });
    return it('should wrap an array of DOM nodes', function() {
      var div1, doms, elms, p1;
      div1 = dom('div').nodes();
      p1 = dom('p').nodes();
      elms = [div1, p1];
      doms = dom(elms);
      expect(doms[0].nodes().nodeName).toBe('DIV');
      return expect(doms[1].nodes().nodeName).toBe('P');
    });
  });

  describe('Parent method', function() {
    return it('should wrap parent node', function() {
      var parent;
      parent = dom().get('#child1').parent();
      return expect(parent.nodes().nodeName).toBe('DIV');
    });
  });

  describe('Get method', function() {
    it('should get node element by class name', function() {
      var nodes;
      nodes = dom().get('.c1').nodes();
      expect(nodes.length).toBe(2);
      return expect(nodes[0].getAttribute('class')).toBe('c1');
    });
    it('should get node element by id', function() {
      var node;
      node = dom().get('#someid').nodes();
      return expect(node.getAttribute('id')).toBe('someid');
    });
    return it('should get node element by tag names', function() {
      var nodes;
      nodes = dom().get('i').nodes();
      return expect(nodes.length).toBe(3);
    });
  });

  describe('Make method', function() {
    return it('should make an element', function() {
      var p;
      p = dom().make('p').nodes();
      return expect(p.nodeName.toLowerCase()).toBe('p');
    });
  });

  describe('inner method', function() {
    return it('should set the innerHTML of the nodes', function() {
      var div, makeTest;
      div = dom().make('div').inner('<p>inner</p>').nodes();
      expect(div.hasChildNodes()).toBe(true);
      makeTest = dom().get('#make-test').nodes();
      return makeTest.appendChild(div);
    });
  });

  describe('add class method', function() {
    it('should add class to the given node', function() {
      var div, doAllHaveClass, elms;
      div = dom().make('div').addClass('newclass').nodes();
      expect(div.className).toBe('newclass');
      div = dom().make('div').addClass('  badname   morespace   someotherclass newclass   ').nodes();
      expect(div.className).toBe('badname morespace someotherclass newclass');
      elms = dom().get('.elm').addClass('extra').nodes();
      doAllHaveClass = elms.map(function(elm) {
        return elm.className.search('extra') !== -1;
      }).reduce((function(a, b) {
        return a && b;
      }), true);
      return expect(doAllHaveClass).toBe(true);
    });
    return it('should add class to the existing classes', function() {
      var div;
      div = dom('div').addClass('init');
      div.addClass('else more');
      return expect(div.nodes().className).toBe('init else more');
    });
  });

  describe('has class', function() {
    return it('should check if the given element has a class', function() {
      var div, isClass;
      div = dom().make('div').addClass('newclass');
      isClass = div.hasClass('newclass');
      return expect(isClass).toBe(true);
    });
  });

  describe('remove class', function() {
    return it('should remove the given class from the list of classes on the element.', function() {
      var div, doAllHaveClass, elms;
      div = dom().make('div').addClass('someclass newclass otherlcass');
      div.removeClass('newclass');
      expect(div.nodes().className).toBe('someclass otherlcass');
      div = dom().make('div').addClass('   random   badname   someclass');
      div.removeClass('random');
      expect(div.nodes().className).toBe('badname someclass');
      div = dom().make('div').addClass('   first   second   third');
      div.removeClass('first second');
      expect(div.nodes().className).toBe('third');
      elms = dom().get('.rmx').removeClass('rmx').nodes();
      doAllHaveClass = elms.map(function(elm) {
        return elm.className.search('rmx') !== -1;
      }).reduce((function(a, b) {
        return a && b;
      }), true);
      return expect(doAllHaveClass).toBe(false);
    });
  });

}).call(this);
